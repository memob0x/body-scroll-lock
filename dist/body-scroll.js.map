{"version":3,"file":"body-scroll.js","sources":["../src/body-scroll.mjs"],"sourcesContent":["// consts\nconst LOCKED_STATE_CLASS = \"body-scroll-lock\";\n\n// scroll position saving closure\nlet scrollSaving = null;\n// lock state flag closure, true if is locked\nlet lockState = false;\n\n// caching involved dom elements\nconst head = document.head;\nconst body = document.body;\nconst html = document.documentElement;\nconst styler = document.createElement(\"style\");\n\n/**\n * Checks whether a given value is a valid number or not\n * @static\n * @private\n * @param {any} value The given value to be checked\n * @returns {Boolean} True if the given value is a number\n */\nconst isNumber = (value) => typeof value === \"number\" && !isNaN(value);\n\n/**\n * Checks whether a given value is a valid scroll object or not\n * @example\n * isValidScrollPosition({top:0, left:100}); // true\n * isValidScrollPosition(null); // false\n * isValidScrollPosition({top:\"foo\", left:NaN}); // false\n * @static\n * @private\n * @param {Object} value The given value to be checked\n * @returns {Boolean} True if the given value is a valid scroll object\n */\nconst isValidScrollPosition = (value) =>\n    value && isNumber(value?.top) && isNumber(value?.left);\n\n/**\n * Formats a given scroll position object value, if malformed returns null\n * @static\n * @private\n * @param {Object} value The given value to be formatted\n * @returns {Object|null} The given value is returned if is a valid scroll position object, otherwise null is returned\n */\nvar formatScrollPosition = (value) =>\n    isValidScrollPosition(value) ? value : null;\n\n/**\n * Restores a given valid scroll position object, if not passed possibly restores a previously saved scroll position object\n * @public\n * @param {Object} [scroll] The given scroll object to be restored\n * @returns {Object|null} The given value is returned if is a valid scroll position object, otherwise null is returned\n */\nconst restoreScrollPosition = (scroll) => {\n    scroll = scroll !== undefined ? scroll : scrollSaving;\n    scroll = formatScrollPosition(scroll);\n\n    if (scroll) {\n        window.scrollTo(scroll.left, scroll.top);\n    }\n\n    return scroll;\n};\n\n/**\n * Saves a given valid scroll position object, if not passed saves the current body scroll position\n * @public\n * @param {Object} [scroll] The given scroll position object to be saved\n * @returns {Object|null} The given value is returned if is a valid scroll position object, otherwise null is returned\n */\nvar saveScrollPosition = (scroll) => {\n    if (scroll === undefined) {\n        scroll = {\n            top: window.pageYOffset,\n            left: window.pageXOffset\n        };\n    }\n\n    scrollSaving = formatScrollPosition(scroll);\n\n    return scrollSaving;\n};\n\n/**\n * Gets the current vertical scrollbar width size in px unit\n * @public\n * @returns {Number} The current vertical scrollbar width in px\n */\nconst getVerticalScrollbarGap = () => {\n    // NOTE: right now this is the safest and more robust way to detect the real document scrollbar size (compatible with iOS pinch to zoom)\n    // bodyscroll is gonna change overflow property anyway, so we keep this not 100% clean approach for now\n\n    // clears possible body scroll lock state css strategies\n    html.classList.remove(LOCKED_STATE_CLASS);\n\n    // caches current html element width\n    // NOTE: right now only getBoundingClientRect grant sub pixel measures, repaint would have been done anyway so...\n    var docWidth = html.getBoundingClientRect().width;\n\n    // fixes current body element width to avoid page jump due to overflow value change\n    body.style.width = body.getBoundingClientRect().width + \"px\";\n    // sets overflow property to hidden\n    html.style.overflowY = body.style.overflowY = \"hidden\";\n\n    // gets the actual scrollbar width comparing the cached html width to the current one with overflow hidden on\n    var scrollbarWidth = html.getBoundingClientRect().width - docWidth;\n\n    // cleans everything up\n    body.style.width = html.style.overflowY = body.style.overflowY = \"\";\n\n    // possibly re applies body scroll lock state css strategies\n    if (isLocked()) {\n        html.classList.add(LOCKED_STATE_CLASS);\n    }\n\n    // returns the vertical scrollbar width\n    return scrollbarWidth;\n};\n\n/**\n * Updates css variables to the current state\n * @public\n * @returns {void} Nothing\n */\nconst updateCssVariables = () => {\n    // ensuring style presence, StyleSheet API throws otherwise\n    if (!body.contains(styler)) {\n        head.append(styler);\n    }\n\n    // only rule\n    const index = 0;\n\n    // clean up past rules\n    if (styler.sheet.cssRules[index]) {\n        styler.sheet.deleteRule(index);\n    }\n\n    // calculating scrollbar gap\n    const verticalScrollbarGap = getVerticalScrollbarGap();\n    // gets the current scroll position object saving or default\n    const scrollPosition = isValidScrollPosition(scrollSaving)\n        ? scrollSaving\n        : { top: 0, left: 0 };\n\n    // composes updated css variables rule\n    const rule = `:root {\n        --body-scroll-lock-top-rect: ${scrollPosition.top * -1}px;\n        --body-scroll-lock-vertical-scrollbar-gap: ${verticalScrollbarGap}px;\n        --body-scroll-lock-vertical-scrollbar-gap-round: ${Math.round(\n            verticalScrollbarGap\n        )}px;\n    }`;\n\n    // sets new rule up\n    styler.sheet.insertRule(rule, index);\n};\n\n/**\n * Returns the currently saved scroll position object\n * @public\n * @returns {Object|null} The currently saved scroll position object, null if nothing was saved\n */\nconst getSavedScrollPosition = () => scrollSaving;\n\n/**\n * Returns the current lock state as a boolean\n * @public\n * @returns {Boolean} True if body scroll is locked, false if not\n */\nconst isLocked = () => lockState;\n\n/**\n * Dispatches the given message name in jQuery.Event\n * @private\n * @param {String} messageName The given message name to be dispatched\n * @returns {void} Nothing\n */\nconst dispatchMessage = (messageName) =>\n    typeof window.CustomEvent === \"function\"\n        ? window.dispatchEvent(new CustomEvent(`bodyscroll${messageName}`))\n        : () => {};\n\n/**\n * Locks the body scroll, saves current body scroll position (if not already saved) and updates css variables\n * @private\n * @returns {Boolean} True if the lock has been successfully done, false if not\n */\nconst doLock = () => {\n    // don't lock when already locked, lock not done, returns false early\n    if (isLocked()) {\n        return false;\n    }\n\n    // sets the lock state to true\n    lockState = true;\n\n    // saves current scroll position if there's not another saving state\n    if (!isValidScrollPosition(scrollSaving)) {\n        saveScrollPosition({\n            top: window.pageYOffset,\n            left: window.pageXOffset\n        });\n    }\n\n    // calculates and applies :root css variables to grant body scroll lock css techniques\n    updateCssVariables();\n\n    // applies body scroll lock css techniques\n    html.classList.add(LOCKED_STATE_CLASS);\n\n    // lock done, returns true\n    return true;\n};\n\n/**\n * Unlocks the body scroll, restores the scroll position previously saved and clears the saving\n * @private\n * @returns {Boolean} True if the unlock has been successfully done, false if not\n */\nvar doUnlock = () => {\n    // don't unlock when already unlocked, unlock not done, returns false early\n    if (!isLocked()) {\n        return false;\n    }\n\n    // sets the lock state to false\n    lockState = false;\n\n    // clears body scroll lock css techniques that could prevent scroll restoration\n    html.classList.remove(LOCKED_STATE_CLASS);\n\n    // restores previously saved scroll position\n    restoreScrollPosition(scrollSaving);\n\n    // clears the scroll position saving\n    scrollSaving = null;\n\n    // unlock done, returns true\n    return true;\n};\n\n/**\n * Locks the body scroll\n * @public\n * @returns {void} Nothing\n */\nconst lock = () => {\n    // returns early if lock itself hasn't been successful\n    if (!doLock()) {\n        return;\n    }\n\n    // dispatch a \"lock done\" notification\n    dispatchMessage(\"lock\");\n};\n\n/**\n * Unlocks the body scroll\n * @public\n * @returns {void} Nothing\n */\nvar unlock = () => {\n    // returns early if unlock itself hasn't been successful\n    if (!doUnlock()) {\n        return;\n    }\n\n    // dispatch an \"unlock done\" notification\n    dispatchMessage(\"unlock\");\n};\n\n// handling browser resize (implicitly includes a possible device orientation change)\n// re applying a consistent lock state when body scroll is locked\nconst RESIZE_DEBOUNCE_TIME = 150;\nlet id = null;\nconst resizeHandler = () => {\n    clearTimeout(id);\n\n    id = setTimeout(() => {\n        // toggling body scroll lock\n\n        // gets rid of possible body scroll locked state\n        // avoids useless computations when scroll is not locked\n        if (!doUnlock()) {\n            return;\n        }\n\n        // recalculates and rewrites lock state\n        doLock();\n\n        // dispatch a \"resize during lock\" notification\n        dispatchMessage(\"resize\");\n    }, RESIZE_DEBOUNCE_TIME);\n};\nwindow.addEventListener(\"resize\", resizeHandler, true);\n\n// public API\nexport default {\n    // main\n    lock: lock,\n    unlock: unlock,\n    isLocked: isLocked,\n    // extras\n    updateCssVariables: updateCssVariables,\n    getVerticalScrollbarGap: getVerticalScrollbarGap,\n    restoreScrollPosition: restoreScrollPosition,\n    saveScrollPosition: saveScrollPosition,\n    getSavedScrollPosition: getSavedScrollPosition\n};\n"],"names":["LOCKED_STATE_CLASS","scrollSaving","lockState","head","document","body","html","documentElement","styler","createElement","isNumber","value","isNaN","isValidScrollPosition","top","left","formatScrollPosition","restoreScrollPosition","scroll","undefined","window","scrollTo","saveScrollPosition","pageYOffset","pageXOffset","getVerticalScrollbarGap","classList","remove","docWidth","getBoundingClientRect","width","style","overflowY","scrollbarWidth","isLocked","add","updateCssVariables","contains","append","index","sheet","cssRules","deleteRule","verticalScrollbarGap","scrollPosition","rule","Math","round","insertRule","getSavedScrollPosition","dispatchMessage","messageName","CustomEvent","dispatchEvent","doLock","doUnlock","lock","unlock","RESIZE_DEBOUNCE_TIME","id","resizeHandler","clearTimeout","setTimeout","addEventListener"],"mappings":"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"}