{"version":3,"sources":["body-scroll.mjs"],"names":["global","factory","exports","module","define","amd","bodyScroll","html","document","documentElement","body","getElementsByTagName","head","stylesIncubator","createElement","type","styler","status","setStatus","bool","scrollState","top","left","behavior","setScrollState","obj","scrollbarGapSelectors","defaults","selector","property","supportedProperty","registerScrollbarGapSelectors","collection","collectionType","Array","isArray","forEach","entry","entryType","push","indexOf","lock","vw","vh","hw","hh","scrollbars","hasScrollbarsGapSelectors","length","scrollState$$1","scrollTop","scrollLeft","bw","clientWidth","bh","clientHeight","offsetWidth","offsetHeight","window","innerWidth","innerHeight","y","x","css","gap","styleSheet","cssText","innerHTML","appendChild","createTextNode","unlock","remove","scrollTo","toggle","timer","addEventListener","clearTimeout","setTimeout","isLocked"],"mappings":"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","file":"body-scroll.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define('bodyScroll', factory) :\n    (global.bodyScroll = factory());\n}(this, (function () { 'use strict';\n\n    const html = document.documentElement;\n    const body = document.body || document.getElementsByTagName('body')[0];\n    const head = document.head || document.getElementsByTagName('head')[0];\n\n    const stylesIncubator = document.createElement('style');\n    stylesIncubator.type = 'text/css';\n    const styler = stylesIncubator;\n\n    let status = false;\n    const setStatus = (bool = true) => (status = bool);\n\n    let scrollState = {\n        top: 0,\n        left: 0,\n        behavior: 'auto'\n    };\n    const setScrollState = (obj = {}) =>\n        (scrollState = {\n            ...scrollState,\n            ...obj\n        });\n\n    let scrollbarGapSelectors = [];\n\n    const defaults = {\n        selector: null,\n        property: 'margin-right'\n    };\n\n    const supportedProperty = [\n        'margin-right',\n        'margin-bottom',\n        'padding-right',\n        'padding-bottom',\n        'right',\n        'bottom'\n    ];\n\n    const registerScrollbarGapSelectors = (collection = []) => {\n        scrollbarGapSelectors = [];\n\n        const collectionType = typeof collection;\n        if (\n            collectionType === 'string' ||\n            (!Array.isArray(collection) && collectionType === 'object')\n        ) {\n            collection = [collection];\n        }\n\n        collection.forEach(entry => {\n            if (entry) {\n                const entryType = typeof entry;\n\n                if (entryType === 'string') {\n                    scrollbarGapSelectors.push({\n                        ...defaults,\n                        ...{\n                            selector: entry\n                        }\n                    });\n                }\n\n                if (\n                    !Array.isArray(entry) &&\n                    entryType === 'object' &&\n                    entry.selector &&\n                    (!entry.property ||\n                        supportedProperty.indexOf(entry.property) > -1)\n                ) {\n                    scrollbarGapSelectors.push({\n                        ...defaults,\n                        ...entry\n                    });\n                }\n            }\n        });\n    };\n\n    const lock = () => {\n        if (!status) {\n            let vw = 0;\n            let vh = 0;\n            let hw = 0;\n            let hh = 0;\n            let scrollbars = {};\n\n            const hasScrollbarsGapSelectors = scrollbarGapSelectors.length;\n\n            const scrollState$$1 = setScrollState({\n                top: html.scrollTop,\n                left: html.scrollLeft\n            });\n            let bw = body.clientWidth;\n            let bh = body.clientHeight;\n            bw -= bw - body.offsetWidth;\n            bh -= bh - body.offsetHeight;\n            if (hasScrollbarsGapSelectors) {\n                vw = window.innerWidth;\n                vh = window.innerHeight;\n                hw = html.clientWidth;\n                hh = html.clientHeight;\n                scrollbars = {\n                    y: vw > hw ? vw - hw : 0,\n                    x: vh > hh ? vh - hh : 0\n                };\n            }\n\n            /*\n            p.fixed: freezes scroll on all devices\n            top/left: the scroll position\n            margin/padding: resets purpuses (other libs overwrite)\n            width/height: freeze document width/height and reserve scrollbars gap\n            */\n            let css = `\n        html {\n            position: fixed!important;\n            top: ${scrollState$$1.top * -1}px!important;\n            left: ${scrollState$$1.left * -1}px!important;\n            right: auto!important;\n            bottom: auto!important;\n        }\n        html,\n        body {\n            margin: 0!important;\n            padding: 0!important;\n            min-width: ${bw}px!important;\n            width: ${bw}px!important;\n            max-width: ${bw}px!important;\n            min-height: ${bh}px!important;\n            height: ${bh}px!important;\n            max-height: ${bh}px!important;\n            overflow: visible!important;\n        }`;\n\n            if (hasScrollbarsGapSelectors) {\n                scrollbarGapSelectors.forEach(entry => {\n                    const gap =\n                        scrollbars[\n                            entry.property.indexOf('right') > -1 ? 'y' : 'x'\n                        ];\n                    if (gap > 0) {\n                        css += `\n                    ${entry.selector} {\n                        ${entry.property}: ${gap}px!important;\n                    }`;\n                    }\n                });\n            }\n\n            if (styler.styleSheet) {\n                styler.styleSheet.cssText = css;\n            } else {\n                styler.innerHTML = '';\n                styler.appendChild(document.createTextNode(css));\n            }\n\n            head.appendChild(styler);\n\n            setStatus(true);\n        }\n    };\n\n    const unlock = () => {\n        if (status) {\n            styler.remove();\n            window.scrollTo(scrollState);\n            setStatus(false);\n        }\n    };\n\n    const toggle = () => (!status ? lock() : unlock());\n\n    let timer = null;\n    window.addEventListener('resize', () => {\n        clearTimeout(timer);\n        timer = setTimeout(() => {\n            if (status) {\n                unlock();\n                lock();\n            }\n        }, 500);\n    });\n\n    var bodyScroll = {\n        lock: lock,\n        unlock: unlock,\n        toggle: toggle,\n        registerScrollbarGapSelectors: registerScrollbarGapSelectors,\n        isLocked: () => status\n    };\n\n    return bodyScroll;\n\n})));\n"]}