{"version":3,"sources":["body-scroll.mjs"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","global","factory","exports","module","define","amd","self","bodyScroll","$head","document","head","$html","documentElement","$body","body","$style","createElement","isLegacyIOS","test","window","navigator","userAgent","isMultiTouchMacAkaIOS13","platform","maxTouchPoints","isAppleTouchDevice","scrollPosition","x","y","scrollbarWidth","clientWidth","isStyleElementInHead","parentNode","insertIndexedRule","rule","arguments","length","undefined","index","appendChild","sheet","cssRules","deleteRule","insertRule","insertResizableRules","concat","resizeListener","isLocked","disabled","lock","scrollX","scrollY","_clientWidth","style","width","overflow","scroll","dispatchEvent","CustomEvent","detail","addEventListener","unlock","removeEventListener","toggle"],"mappings":"AAAA,aAEA,SAASA,QAAQC,GAAwT,OAAtOD,QAArD,mBAAXE,QAAoD,iBAApBA,OAAOC,SAAmC,SAAiBF,GAAO,cAAcA,GAA2B,SAAiBA,GAAO,OAAOA,GAAyB,mBAAXC,QAAyBD,EAAIG,cAAgBF,QAAUD,IAAQC,OAAOG,UAAY,gBAAkBJ,IAAyBA,IAExV,SAAWK,EAAQC,GACqD,YAAlD,oBAAZC,QAA0B,YAAcR,QAAQQ,WAA4C,oBAAXC,OAAyBA,OAAOD,QAAUD,IAA8B,mBAAXG,QAAyBA,OAAOC,IAAMD,OAAO,aAAcH,IAAYD,EAASA,GAAUM,MAAaC,WAAaN,IAD5Q,MAEG,EAAQ,WAGT,IAAIO,EAAQC,SAASC,KACjBC,EAAQF,SAASG,gBACjBC,EAAQJ,SAASK,KACjBC,EAASN,SAASO,cAAc,SAChCC,EAAc,mBAAmBC,KAAKC,OAAOC,UAAUC,WACvDC,EAAwD,aAA9BH,OAAOC,UAAUG,UAA2BJ,OAAOC,UAAUI,eAAiB,EACxGC,EAAqBR,GAAeK,EACpCI,EAAiB,CACnBC,EAAG,EACHC,EAAG,GAEDC,EAAiB,EACjBC,EAAc,EAEdC,EAAuB,WACzB,OAAOhB,EAAOiB,aAAexB,GAG3ByB,EAAoB,WACtB,IAAIC,EAAOC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,GAC3EG,EAAQH,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,EAE3EJ,KACHvB,EAAM+B,YAAYxB,GAGhBA,EAAOyB,MAAMC,SAASH,IACxBvB,EAAOyB,MAAME,WAAWJ,GAG1BvB,EAAOyB,MAAMG,WAAWT,EAAMI,IAa5BM,EAAuB,WACzB,OAAOX,EAAkB,oCAAoCY,OAAOf,EAAa,4BAA6B,IAG5GgB,EAAiB,WACnBhB,EAAcnB,EAAMmB,YACpBc,KAGEG,EAAW,WACb,OAAOhB,MAA2BhB,EAAOiC,UAGvCC,EAAO,WACT,GAAIF,IACF,OAAO,EAGLtB,IACFC,EAAiB,CACfC,EAAGR,OAAO+B,QACVtB,EAAGT,OAAOgC,UAId,IAAIC,EAAezC,EAAMmB,YAsBzB,OArBAjB,EAAMwC,MAAMC,MAAQzC,EAAMiB,YAAc,KACxCnB,EAAM0C,MAAME,SAAW,SACvBzB,EAAcnB,EAAMmB,YACpBD,EAAiBC,EAAcsB,EAC/BvC,EAAMwC,MAAMC,MAAQ,GACpB3C,EAAM0C,MAAME,SAAW,GAxCvBtB,EAAkB,+GAA+GY,OAAOhB,EAAgB,gCAAiC,GAGvLI,EADER,EACgB,4EAA4EoB,QAAQ,EAAInB,EAAeE,EAAG,yCAAyCiB,QAAQ,EAAInB,EAAeC,EAAG,8EAEjL,qEAFgQ,GAuCpRiB,IACA7B,EAAOiC,UAAW,EAEdvB,GACFN,OAAOqC,OAAO,EAAG,GAGnBrC,OAAOsC,cAAc,IAAIC,YAAY,iBAAkB,CACrDC,OAAQ,CACN7B,YAAaA,EACbD,eAAgBA,MAGpBV,OAAOyC,iBAAiB,SAAUd,IAC3B,GAGLe,EAAS,WACX,QAAKd,MAILhC,EAAOiC,UAAW,EAEdvB,GACFN,OAAOqC,OAAO9B,EAAeC,EAAGD,EAAeE,GAGjDT,OAAOsC,cAAc,IAAIC,YAAY,mBAAoB,CACvDC,OAAQ,CACN7B,YAAaA,EACbD,eAAgBA,MAGpBV,OAAO2C,oBAAoB,SAAUhB,IAC9B,IAWT,MARiB,CACfG,KAAMA,EACNY,OAAQA,EACRE,OAAQ,WACN,OAAQhB,IAAsBc,IAATZ,KAEvBF,SAAUA","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define('bodyScroll', factory) :\n    (global = global || self, global.bodyScroll = factory());\n}(this, function () { 'use strict';\n\n    // elements involved\n    const $head = document.head;\n    const $html = document.documentElement;\n    const $body = document.body;\n    const $style = document.createElement(\"style\");\n\n    // Apple devices recognition\n    const isLegacyIOS = /iPad|iPhone|iPod/.test(window.navigator.userAgent);\n    const isMultiTouchMacAkaIOS13 =\n        window.navigator.platform === \"MacIntel\" &&\n        window.navigator.maxTouchPoints > 1;\n    const isAppleTouchDevice = isLegacyIOS || isMultiTouchMacAkaIOS13;\n\n    let scrollPosition = {\n        x: 0,\n        y: 0\n    };\n    let scrollbarWidth = 0;\n    let clientWidth = 0;\n\n    /**\n     * Checks if the style element is in the tag head or not\n     * @returns {boolean} true if present\n     */\n    const isStyleElementInHead = () => $style.parentNode === $head;\n\n    /**\n     * Inserts a rule with the CSSStyleSheet interface\n     * @param {string} rule The CSS rule to add\n     * @param {number} index The index of the CSS rule in the CSSRulesList\n     */\n    const insertIndexedRule = (rule = \"\", index = 0) => {\n        if (!isStyleElementInHead()) {\n            $head.appendChild($style);\n        }\n\n        if ($style.sheet.cssRules[index]) {\n            $style.sheet.deleteRule(index);\n        }\n\n        $style.sheet.insertRule(rule, index);\n    };\n\n    /**\n     * Inserts the CSS rules that doesn't need to be recalculated on resize\n     */\n    const insertBaseRules = () => {\n        insertIndexedRule(\n            `html, body {\n            height: auto!important;\n            margin: 0!important;\n            padding: 0 ${scrollbarWidth}px 0 0!important;\n        }`,\n            0\n        );\n\n        if (isAppleTouchDevice) {\n            insertIndexedRule(\n                `html {\n                position: fixed!important;\n                top: ${-1 * scrollPosition.y}px!important;\n                left: ${-1 * scrollPosition.x}px!important;\n                overflow: visible!important;\n            }`,\n                1\n            );\n        } else {\n            insertIndexedRule(\n                `body {\n                overflow: hidden!important;\n            }`,\n                1\n            );\n        }\n    };\n\n    /**\n     * Inserts the CSS rules that need to be recalculated on resize\n     */\n    const insertResizableRules = () =>\n        insertIndexedRule(\n            `html, body {\n            width: ${clientWidth}px!important;\n        }`,\n            2\n        );\n\n    /**\n     *\n     */\n    const resizeListener = () => {\n        clientWidth = $html.clientWidth;\n\n        insertResizableRules();\n    };\n\n    /**\n     * Returns whether the body scroll is locked or not\n     * @returns {boolean} The body scroll lock state\n     */\n    const isLocked = () => isStyleElementInHead() && !$style.disabled;\n\n    /**\n     * Locks the body scroll\n     * @returns {boolean} Whether the lock action has been successful of not (false if already locked)\n     */\n    const lock = () => {\n        if (isLocked()) {\n            return false;\n        }\n\n        if (isAppleTouchDevice) {\n            scrollPosition = {\n                x: window.scrollX,\n                y: window.scrollY\n            };\n        }\n\n        const _clientWidth = $html.clientWidth;\n        $body.style.width = $body.clientWidth + \"px\";\n        $html.style.overflow = \"hidden\";\n        clientWidth = $html.clientWidth;\n        scrollbarWidth = clientWidth - _clientWidth;\n        $body.style.width = \"\";\n        $html.style.overflow = \"\";\n\n        insertBaseRules();\n        insertResizableRules();\n\n        $style.disabled = false;\n\n        if (isAppleTouchDevice) {\n            window.scroll(0, 0);\n        }\n\n        window.dispatchEvent(\n            new CustomEvent(\"bodyScrollLock\", {\n                detail: {\n                    clientWidth: clientWidth,\n                    scrollbarWidth: scrollbarWidth\n                }\n            })\n        );\n\n        window.addEventListener(\"resize\", resizeListener);\n\n        return true;\n    };\n\n    /**\n     * Unlocks the body scroll\n     * @returns {boolean} Whether the unlock action has been successful of not (false if already unlocked)\n     */\n    const unlock = () => {\n        if (!isLocked()) {\n            return false;\n        }\n\n        $style.disabled = true;\n\n        if (isAppleTouchDevice) {\n            window.scroll(scrollPosition.x, scrollPosition.y);\n        }\n\n        window.dispatchEvent(\n            new CustomEvent(\"bodyScrollUnlock\", {\n                detail: {\n                    clientWidth: clientWidth,\n                    scrollbarWidth: scrollbarWidth\n                }\n            })\n        );\n\n        window.removeEventListener(\"resize\", resizeListener);\n\n        return true;\n    };\n\n    var bodyScroll = {\n        lock: lock,\n        unlock: unlock,\n        toggle: () => (!isLocked() ? lock() : unlock()),\n        isLocked: isLocked\n    };\n\n    return bodyScroll;\n\n}));\n"],"file":"body-scroll.min.js"}