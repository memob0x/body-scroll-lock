{"version":3,"sources":["body-scroll.mjs"],"names":["_objectSpread","target","i","arguments","length","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","obj","value","defineProperty","configurable","writable","_typeof","Symbol","iterator","constructor","prototype","global","factory","exports","module","define","amd","bodyScroll","status","setStatus","bool","undefined","settings","incubator","html","document","documentElement","body","getElementsByTagName","head","styler","createElement","type","id","_incubator","s4","setStyle","css","styleSheet","cssText","innerHTML","appendChild","createTextNode","querySelector","remove","Math","random","toString","substring","state","scroll","top","left","behavior","dimensions","width","height","scrollbar","y","x","corrections","defaults","selector","property","inverted","supportedProperty","getCorrections","entry","gap","scrollbars","indexOf","factor","lock","vw","window","innerWidth","vh","innerHeight","clientWidth","clientHeight","scrollTop","scrollLeft","scrollWidth","scrollHeight","firstChild","append","unlock","before","scrollTo","timer","addEventListener","clearTimeout","setTimeout","toggle","setCorrections","collection","collectionType","Array","isArray","entryType","push","isLocked","setOptions","options"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define('bodyScroll', factory) :\n    (global.bodyScroll = factory());\n}(this, (function () { 'use strict';\n\n    let status = false;\n    const setStatus = (bool = true) => (status = bool);\n\n    let settings = {\n        incubator: false // experimental feature\n    };\n\n    const setOptions = (options = {}) => {\n        if (!status) {\n            settings = { ...settings, ...options };\n        }\n    };\n\n    const html = document.documentElement;\n    const body = document.body || document.getElementsByTagName('body')[0];\n    const head = document.head || document.getElementsByTagName('head')[0];\n\n    const stylerID = 'body-scroll';\n    const styler = document.createElement('style');\n    styler.type = 'text/css';\n    styler.id = stylerID;\n\n    const setStyle = (css = '') => {\n        if (!css) {\n            styler.remove();\n\n            return;\n        }\n\n        if (styler.styleSheet) {\n            styler.styleSheet.cssText = css;\n        } else {\n            styler.innerHTML = '';\n            styler.appendChild(document.createTextNode(css));\n        }\n\n        if (!head.querySelector('style#' + stylerID)) {\n            head.appendChild(styler);\n        }\n    };\n\n    const incubator = (_incubator => {\n        const s4 = function() {\n            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n        };\n\n        _incubator.id = `body-scroll-lock-${s4()}${s4()}-${s4()}-${s4()}-${s4()}-${s4()}${s4()}${s4()}`;\n\n        return _incubator;\n    })(document.createElement('div'));\n\n    let state = {\n        scroll: {\n            top: 0,\n            left: 0,\n            behavior: 'auto'\n        },\n        dimensions: {\n            width: 0,\n            height: 0\n        },\n        scrollbar: {\n            y: 0,\n            x: 0\n        }\n    };\n\n    const setState = () => {\n        const vw = window.innerWidth;\n        const vh = window.innerHeight;\n        const width = html.clientWidth;\n        const height = html.clientHeight;\n        const scroll = {\n            top: html.scrollTop,\n            left: html.scrollLeft\n        };\n        const scrollbars = {\n            y: vw > width ? vw - width : 0,\n            x: vh > height ? vh - height : 0\n        };\n\n        state = {\n            ...state,\n            ...{\n                scroll: scroll,\n                html: {\n                    width: vw + scroll.left - scrollbars.y,\n                    height: vh + scroll.top - scrollbars.x\n                },\n                body: {\n                    width: html.scrollWidth,\n                    height: html.scrollHeight\n                },\n                scrollbars: scrollbars\n            }\n        };\n    };\n\n    let corrections = [];\n\n    const defaults = {\n        selector: null,\n        property: 'margin-right',\n        inverted: false\n    };\n\n    const supportedProperty = [\n        'margin-right',\n        'margin-bottom',\n        'padding-right',\n        'padding-bottom',\n        'right',\n        'bottom'\n    ];\n\n    const setCorrections = (collection = []) => {\n        corrections = [];\n\n        const collectionType = typeof collection;\n        if (\n            collectionType === 'string' ||\n            (!Array.isArray(collection) && collectionType === 'object')\n        ) {\n            collection = [collection];\n        }\n\n        collection.forEach(entry => {\n            if (entry) {\n                const entryType = typeof entry;\n\n                if (entryType === 'string') {\n                    corrections.push({\n                        ...defaults,\n                        ...{\n                            selector: entry\n                        }\n                    });\n                }\n\n                if (\n                    !Array.isArray(entry) &&\n                    entryType === 'object' &&\n                    entry.selector &&\n                    (!entry.property ||\n                        supportedProperty.indexOf(entry.property) > -1)\n                ) {\n                    corrections.push({\n                        ...defaults,\n                        ...entry\n                    });\n                }\n            }\n        });\n    };\n\n    const getCorrections = (inverted = false) => {\n        let css = '';\n\n        if (corrections.length) {\n            corrections.forEach(entry => {\n                const gap =\n                    state.scrollbars[\n                        entry.property.indexOf('right') > -1 ? 'y' : 'x'\n                    ];\n\n                if (gap > 0) {\n                    let factor = 1;\n\n                    if (inverted) {\n                        factor = entry.inverted ? -1 : 0;\n                    }\n\n                    css += `\n                ${entry.selector} {\n                    ${entry.property}: ${gap * factor}px!important;\n                }`;\n                }\n            });\n        }\n\n        return css;\n    };\n\n    const lock = () => {\n        if (!status) {\n            // snapshot of current state\n            setState();\n\n            //\n            if (settings.incubator) {\n                incubator.innerHTML = '';\n                while (body.firstChild) {\n                    incubator.append(body.firstChild);\n                }\n                body.append(incubator);\n            }\n\n            setStyle(`\n            html,\n            body\n            ${settings.incubator ? ', #' + incubator.id : ''} {\n                margin: 0!important;\n                padding: 0!important;\n                min-width: auto!important;\n                min-height: auto!important;\n                max-width: none!important;\n                max-height: none!important;\n            }\n\n            html\n            ${settings.incubator ? ', body' : ''} {\n                width: ${state.html.width}px!important;\n                height: ${state.html.height}px!important;\n            }\n\n            html {\n                position: fixed!important;\n                top: ${state.scroll.top * -1}px!important;\n                left: ${state.scroll.left * -1}px!important;\n            }\n\n            html,\n            body {              \n                overflow: visible!important;\n            }\n\n            ${settings.incubator ? '#' + incubator.id : 'body'} {\n                width: ${state.body.width}px!important;\n                height: ${state.body.height}px!important;\n            }\n            \n            ${getCorrections()}`);\n\n            setStatus(true);\n        }\n    };\n\n    const unlock = () => {\n        if (status) {\n            setStyle(getCorrections(true));\n\n            if (settings.incubator) {\n                while (incubator.firstChild) {\n                    incubator.before(incubator.firstChild);\n                }\n                incubator.remove();\n            }\n\n            window.scrollTo(state.scroll);\n\n            setStatus(false);\n        }\n    };\n\n    const toggle = () => (!status ? lock() : unlock());\n\n    let timer = null;\n\n    window.addEventListener('resize', () => {\n        clearTimeout(timer);\n        \n        timer = setTimeout(() => {\n            if (status) {\n                unlock();\n\n                lock();\n            }\n        }, 500);\n    });\n\n    var bodyScroll = {\n        lock: lock,\n        unlock: unlock,\n        toggle: toggle,\n        setCorrections: setCorrections,\n        isLocked: () => status,\n        setOptions: setOptions\n    };\n\n    return bodyScroll;\n\n})));\n"],"file":"body-scroll.min.js"}