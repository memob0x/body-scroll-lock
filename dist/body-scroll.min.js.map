{"version":3,"sources":["body-scroll.mjs"],"names":["_objectSpread","target","i","arguments","length","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","obj","value","defineProperty","configurable","writable","_typeof","Symbol","iterator","constructor","prototype","global","factory","exports","module","define","amd","bodyScroll","html","document","documentElement","body","getElementsByTagName","head","stylesIncubator","createElement","type","styler","status","setStatus","bool","undefined","scrollState","top","left","behavior","scrollbarGapSelectors","defaults","selector","property","supportedProperty","lock","vw","vh","hw","hh","scrollbars","hasScrollbarsGapSelectors","scrollState$$1","setScrollState","scrollTop","scrollLeft","bw","clientWidth","bh","clientHeight","offsetWidth","offsetHeight","window","innerWidth","innerHeight","y","x","css","entry","gap","indexOf","styleSheet","cssText","innerHTML","appendChild","createTextNode","unlock","remove","scrollTo","timer","addEventListener","clearTimeout","setTimeout","registerScrollbarGapSelectors","collection","collectionType","Array","isArray","entryType","push","isLocked"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define('bodyScroll', factory) :\n    (global.bodyScroll = factory());\n}(this, (function () { 'use strict';\n\n    const html = document.documentElement;\n    const body = document.body || document.getElementsByTagName('body')[0];\n    const head = document.head || document.getElementsByTagName('head')[0];\n\n    const stylesIncubator = document.createElement('style');\n    stylesIncubator.type = 'text/css';\n    const styler = stylesIncubator;\n\n    let status = false;\n    const setStatus = (bool = true) => (status = bool);\n\n    let scrollState = {\n        top: 0,\n        left: 0,\n        behavior: 'auto'\n    };\n    const setScrollState = (obj = {}) =>\n        (scrollState = {\n            ...scrollState,\n            ...obj\n        });\n\n    let scrollbarGapSelectors = [];\n\n    const defaults = {\n        selector: null,\n        property: 'margin-right'\n    };\n\n    const supportedProperty = [\n        'margin-right',\n        'margin-bottom',\n        'padding-right',\n        'padding-bottom',\n        'right',\n        'bottom'\n    ];\n\n    const registerScrollbarGapSelectors = (collection = []) => {\n        scrollbarGapSelectors = [];\n\n        const collectionType = typeof collection;\n        if (\n            collectionType === 'string' ||\n            (!Array.isArray(collection) && collectionType === 'object')\n        ) {\n            collection = [collection];\n        }\n\n        collection.forEach(entry => {\n            if (entry) {\n                const entryType = typeof entry;\n\n                if (entryType === 'string') {\n                    scrollbarGapSelectors.push({\n                        ...defaults,\n                        ...{\n                            selector: entry\n                        }\n                    });\n                }\n\n                if (\n                    !Array.isArray(entry) &&\n                    entryType === 'object' &&\n                    entry.selector &&\n                    (!entry.property ||\n                        supportedProperty.indexOf(entry.property) > -1)\n                ) {\n                    scrollbarGapSelectors.push({\n                        ...defaults,\n                        ...entry\n                    });\n                }\n            }\n        });\n    };\n\n    const lock = () => {\n        if (!status) {\n            let vw = 0;\n            let vh = 0;\n            let hw = 0;\n            let hh = 0;\n            let scrollbars = {};\n\n            const hasScrollbarsGapSelectors = scrollbarGapSelectors.length;\n\n            const scrollState$$1 = setScrollState({\n                top: html.scrollTop,\n                left: html.scrollLeft\n            });\n            let bw = body.clientWidth;\n            let bh = body.clientHeight;\n            bw -= bw - body.offsetWidth;\n            bh -= bh - body.offsetHeight;\n            if (hasScrollbarsGapSelectors) {\n                vw = window.innerWidth;\n                vh = window.innerHeight;\n                hw = html.clientWidth;\n                hh = html.clientHeight;\n                scrollbars = {\n                    y: vw > hw ? vw - hw : 0,\n                    x: vh > hh ? vh - hh : 0\n                };\n            }\n\n            let css = `\n        html {\n            overflow: visible!important;\n            margin-right: 0!important;\n        }\n        html,\n        body {\n            padding-right: 0!important;\n            min-width: ${bw}px!important;\n            width: ${bw}px!important;\n            max-width: ${bw}px!important;\n            min-height: ${bh}px!important;\n            height: ${bh}px!important;\n            max-height: ${bh}px!important;\n        }\n        body {\n            overflow: hidden!important;\n            position: fixed!important;\n            top: 0!important;\n            left: 0!important;\n            right: auto!important;\n            bottom: auto!important;\n            margin: -${scrollState$$1.top}px 0 0 -${scrollState$$1.left}px!important;\n        }`;\n\n            if (hasScrollbarsGapSelectors) {\n                scrollbarGapSelectors.forEach(entry => {\n                    const gap =\n                        scrollbars[\n                            entry.property.indexOf('right') > -1 ? 'y' : 'x'\n                        ];\n                    if (gap > 0) {\n                        css += `\n                    ${entry.selector} {\n                        ${entry.property}: ${gap}px!important;\n                    }`;\n                    }\n                });\n            }\n\n            if (styler.styleSheet) {\n                styler.styleSheet.cssText = css;\n            } else {\n                styler.innerHTML = '';\n                styler.appendChild(document.createTextNode(css));\n            }\n\n            head.appendChild(styler);\n\n            setStatus(true);\n        }\n    };\n\n    const unlock = () => {\n        if (status) {\n            styler.remove();\n            window.scrollTo(scrollState);\n            setStatus(false);\n        }\n    };\n\n    let timer = null;\n    window.addEventListener('resize', () => {\n        clearTimeout(timer);\n        timer = setTimeout(() => {\n            if (status) {\n                unlock();\n                lock();\n            }\n        }, 500);\n    });\n\n    var bodyScroll = {\n        lock: lock,\n        unlock: unlock,\n        registerScrollbarGapSelectors: registerScrollbarGapSelectors,\n        isLocked: () => status\n    };\n\n    return bodyScroll;\n\n})));\n"],"file":"body-scroll.min.js"}