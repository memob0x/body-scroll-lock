{"version":3,"sources":["body-scroll.mjs"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","global","factory","exports","module","define","amd","self","bodyScroll","$head","document","head","$html","documentElement","$body","body","createStyle","$el","createElement","type","$stylerBase","$stylerResizable","isLegacyIOS","test","window","navigator","userAgent","isMultiTouchMacAkaIOS13","platform","maxTouchPoints","isAppleTouchDevice","BodyScrollEvent","CustomEvent","event","params","bubbles","cancelable","detail","undefined","evt","createEvent","initCustomEvent","Event","status","scroll","x","y","scrollbarWidth","clientWidth","printRules","$actor","rules","styleSheet","cssText","appendChild","createTextNode","parentNode","append","printBaseRules","output","concat","printResizableRules","resize","isLocked","lock","scrollX","scrollY","_clientWidth","style","width","overflow","dispatchEvent","addEventListener","unlock","innerHTML","removeEventListener","toggle"],"mappings":"AAAA,aAEA,SAASA,QAAQC,GAAwT,OAAtOD,QAArD,mBAAXE,QAAoD,iBAApBA,OAAOC,SAAmC,SAAiBF,GAAO,cAAcA,GAA2B,SAAiBA,GAAO,OAAOA,GAAyB,mBAAXC,QAAyBD,EAAIG,cAAgBF,QAAUD,IAAQC,OAAOG,UAAY,gBAAkBJ,IAAyBA,IAExV,SAAWK,EAAQC,GACqD,YAAlD,oBAAZC,QAA0B,YAAcR,QAAQQ,WAA4C,oBAAXC,OAAyBA,OAAOD,QAAUD,IAA8B,mBAAXG,QAAyBA,OAAOC,IAAMD,OAAO,aAAcH,IAAYD,EAASA,GAAUM,MAAaC,WAAaN,IAD5Q,MAEG,EAAQ,WAGT,IAAIO,EAAQC,SAASC,KACjBC,EAAQF,SAASG,gBACjBC,EAAQJ,SAASK,KAEjBC,EAAc,WAChB,IAAIC,EAAMP,SAASQ,cAAc,SAEjC,OADAD,EAAIE,KAAO,WACJF,GAGLG,EAAcJ,IACdK,EAAmBL,IACnBM,EAAc,mBAAmBC,KAAKC,OAAOC,UAAUC,WACvDC,EAAwD,aAA9BH,OAAOC,UAAUG,UAA2BJ,OAAOC,UAAUI,eAAiB,EACxGC,EAAqBR,GAAeK,EAEpCI,EAAkB,WACpB,GAAkC,mBAAvBP,OAAOQ,YAChB,OAAOR,OAAOQ,YAGhB,SAASA,EAAYC,EAAOC,GAC1BA,EAASA,GAAU,CACjBC,SAAS,EACTC,YAAY,EACZC,YAAQC,GAEV,IAAIC,EAAM7B,SAAS8B,YAAY,eAE/B,OADAD,EAAIE,gBAAgBR,EAAOC,EAAOC,QAASD,EAAOE,WAAYF,EAAOG,QAC9DE,EAIT,OADAP,EAAYhC,UAAYwB,OAAOkB,MAAM1C,UAC9BgC,EAjBa,GAoBlBW,GAAS,EACTC,EAAS,CACXC,EAAG,EACHC,EAAG,GAEDC,EAAiB,EACjBC,EAAc,EAkBdC,EAAa,SAAoBC,EAAQC,GACvCD,EAAOE,WACTF,EAAOE,WAAWC,QAAUF,EAE5BD,EAAOI,YAAY5C,SAAS6C,eAAeJ,IAGzCD,EAAOM,aAAe/C,GACxBA,EAAMgD,OAAOP,IAIbQ,EAAiB,WACnB,OAAOT,EAAW7B,GA5BduC,EAAS,mGAAmGC,OAAOb,EAAgB,4BAGrIY,GADE7B,EACQ,oEAAoE8B,QAAQ,EAAIhB,EAAOE,EAAG,qCAAqCc,QAAQ,EAAIhB,EAAOC,EAAG,sEAErJ,+DANK,IACbc,GA+BFE,EAAsB,WACxB,OAAOZ,EAAW5B,EApBX,gCAAgCuC,OAAOZ,EAAa,0BAuBzDc,EAAS,WACNnB,IAILK,EAAcpC,EAAMoC,YACpBa,MAGEE,EAAW,WACb,OAAOpB,GAGLqB,EAAO,WACT,GAAIrB,EACF,OAAO,EAGTA,GAAS,EAELb,IACFc,EAAS,CACPC,EAAGrB,OAAOyC,QACVnB,EAAGtB,OAAO0C,UAId,IAAIC,EAAevD,EAAMoC,YAqBzB,OApBAlC,EAAMsD,MAAMC,MAAQvD,EAAMkC,YAAc,KACxCpC,EAAMwD,MAAME,SAAW,SACvBtB,EAAcpC,EAAMoC,YACpBD,EAAiBC,EAAcmB,EAC/BrD,EAAMsD,MAAMC,MAAQ,GACpBzD,EAAMwD,MAAME,SAAW,GACvBZ,IACAG,IAEI/B,GACFN,OAAOoB,OAAO,EAAG,GAGnBpB,OAAO+C,cAAc,IAAIxC,EAAgB,iBAAkB,CACzDM,OAAQ,CACNW,YAAaA,EACbD,eAAgBA,MAGpBrC,SAAS8D,iBAAiB,SAAUV,IAC7B,GAGLW,EAAS,WACX,QAAK9B,IAILA,GAAS,EACTvB,EAAYsD,UAAY,GACxBrD,EAAiBqD,UAAY,GAEzB5C,GACFN,OAAOoB,OAAOA,EAAOC,EAAGD,EAAOE,GAGjCtB,OAAO+C,cAAc,IAAIxC,EAAgB,mBAAoB,CAC3DM,OAAQ,CACNW,YAAaA,EACbD,eAAgBA,MAGpBrC,SAASiE,oBAAoB,SAAUb,IAChC,IAWT,MARiB,CACfE,KAAMA,EACNS,OAAQA,EACRG,OAAQ,WACN,OAAQb,IAAsBU,IAATT,KAEvBD,SAAUA","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define('bodyScroll', factory) :\n    (global = global || self, global.bodyScroll = factory());\n}(this, function () { 'use strict';\n\n    // main elements\n    const $head = document.head;\n    const $html = document.documentElement;\n    const $body = document.body;\n\n    // stylers\n    const createStyle = () => {\n        const $el = document.createElement(\"style\");\n        $el.type = \"text/css\";\n        return $el;\n    };\n    const $stylerBase = createStyle();\n    const $stylerResizable = createStyle();\n\n    // Apple devices recognition\n    const isLegacyIOS = /iPad|iPhone|iPod/.test(window.navigator.userAgent);\n    const isMultiTouchMacAkaIOS13 =\n        window.navigator.platform === \"MacIntel\" &&\n        window.navigator.maxTouchPoints > 1;\n    const isAppleTouchDevice = isLegacyIOS || isMultiTouchMacAkaIOS13;\n\n    const BodyScrollEvent = (() => {\n        if (typeof window.CustomEvent === \"function\") {\n            return window.CustomEvent;\n        }\n\n        function CustomEvent(event, params) {\n            params = params || {\n                bubbles: false,\n                cancelable: false,\n                detail: undefined\n            };\n\n            const evt = document.createEvent(\"CustomEvent\");\n\n            evt.initCustomEvent(\n                event,\n                params.bubbles,\n                params.cancelable,\n                params.detail\n            );\n\n            return evt;\n        }\n\n        CustomEvent.prototype = window.Event.prototype;\n\n        return CustomEvent;\n    })();\n\n    // local vars\n    let status = false;\n    let scroll = {\n        x: 0,\n        y: 0\n    };\n    let scrollbarWidth = 0;\n    let clientWidth = 0;\n\n    /**\n     * Gets the CSS rules that can't be influenced by a window resize\n     * @returns {string} CSS rules\n     */\n    const getBaseRules = () => {\n        let output = `html, body {\n        height: auto!important;\n        margin: 0!important;\n        padding: 0 ${scrollbarWidth}px 0 0!important;\n    }`;\n\n        if (isAppleTouchDevice) {\n            output += `html {\n            position: fixed!important;\n            top: ${-1 * scroll.y}px!important;\n            left: ${-1 * scroll.x}px!important;\n            overflow: visible!important;\n        }`;\n        } else {\n            output += `body {\n            overflow: hidden!important;\n        }`;\n        }\n\n        return output;\n    };\n\n    /**\n     * Gets the CSS rules that can be influenced by a window resize\n     * @returns {string} CSS rules\n     */\n    const getResizableRules = () => {\n        return `html, body {\n        width: ${clientWidth}px!important;\n    }`;\n    };\n\n    /**\n     * Sets some CSS rules to a style element\n     * @param {HTMLElement} $actor A style element\n     * @param {string} rules The CSS rules\n     */\n    const printRules = ($actor, rules) => {\n        if ($actor.styleSheet) {\n            $actor.styleSheet.cssText = rules;\n        } else {\n            $actor.appendChild(document.createTextNode(rules));\n        }\n\n        if ($actor.parentNode !== $head) {\n            $head.append($actor);\n        }\n    };\n\n    // shorthand style printers\n    const printBaseRules = () => printRules($stylerBase, getBaseRules());\n    const printResizableRules = () =>\n        printRules($stylerResizable, getResizableRules());\n\n    /**\n     * Resize handler to refresh the CSS rules when body scroll is locked\n     */\n    const resize = () => {\n        if (!status) {\n            return;\n        }\n\n        clientWidth = $html.clientWidth;\n\n        printResizableRules();\n    };\n\n    /**\n     * Returns whether the body scroll is locked or not\n     * @returns {boolean} The body scroll lock state\n     */\n    const isLocked = () => status;\n\n    /**\n     * Locks the body scroll\n     * @returns {boolean} Whether the lock action has been successful of not\n     */\n    const lock = () => {\n        if (status) {\n            return false;\n        }\n\n        status = true;\n\n        if (isAppleTouchDevice) {\n            scroll = {\n                x: window.scrollX,\n                y: window.scrollY\n            };\n        }\n\n        const _clientWidth = $html.clientWidth;\n        $body.style.width = $body.clientWidth + \"px\";\n        $html.style.overflow = \"hidden\";\n        clientWidth = $html.clientWidth;\n        scrollbarWidth = clientWidth - _clientWidth;\n        $body.style.width = \"\";\n        $html.style.overflow = \"\";\n\n        printBaseRules();\n        printResizableRules();\n\n        if (isAppleTouchDevice) {\n            window.scroll(0, 0);\n        }\n\n        window.dispatchEvent(\n            new BodyScrollEvent(\"bodyScrollLock\", {\n                detail: {\n                    clientWidth: clientWidth,\n                    scrollbarWidth: scrollbarWidth\n                }\n            })\n        );\n\n        document.addEventListener(\"resize\", resize);\n\n        return true;\n    };\n\n    /**\n     * Unlocks the body scroll\n     * @returns {boolean} Whether the unlock action has been successful of not\n     */\n    const unlock = () => {\n        if (!status) {\n            return false;\n        }\n\n        status = false;\n\n        $stylerBase.innerHTML = \"\";\n        $stylerResizable.innerHTML = \"\";\n\n        if (isAppleTouchDevice) {\n            window.scroll(scroll.x, scroll.y);\n        }\n\n        window.dispatchEvent(\n            new BodyScrollEvent(\"bodyScrollUnlock\", {\n                detail: {\n                    clientWidth: clientWidth,\n                    scrollbarWidth: scrollbarWidth\n                }\n            })\n        );\n\n        document.removeEventListener(\"resize\", resize);\n\n        return true;\n    };\n\n    var bodyScroll = {\n        lock: lock,\n        unlock: unlock,\n        toggle: () => (!isLocked() ? lock() : unlock()),\n        isLocked: isLocked\n    };\n\n    return bodyScroll;\n\n}));\n"],"file":"body-scroll.min.js"}