{"version":3,"sources":["body-scroll.mjs"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","global","factory","exports","module","define","amd","self","bodyScroll","$head","document","head","$stylerBase","createElement","$stylerResizable","isLegacyIOS","test","navigator","platform","isMultiTouchMac","maxTouchPoints","isAppleTouchDevice","status","scroll","x","y","scrollBarWidth","clientWidth","printRules","$actor","rules","innerHTML","parentNode","append","printBaseRules","output","printResizableRules","isLocked","lock","window","scrollX","scrollY","_clientWidth","documentElement","body","style","width","overflow","unlock","addEventListener","toggle"],"mappings":"AAAA,aAEA,SAASA,QAAQC,GAAwT,OAAtOD,QAArD,mBAAXE,QAAoD,iBAApBA,OAAOC,SAAmC,SAAiBF,GAAO,cAAcA,GAA2B,SAAiBA,GAAO,OAAOA,GAAyB,mBAAXC,QAAyBD,EAAIG,cAAgBF,QAAUD,IAAQC,OAAOG,UAAY,gBAAkBJ,IAAyBA,IAExV,SAAWK,EAAQC,GACqD,YAAlD,oBAAZC,QAA0B,YAAcR,QAAQQ,WAA4C,oBAAXC,OAAyBA,OAAOD,QAAUD,IAA8B,mBAAXG,QAAyBA,OAAOC,IAAMD,OAAO,aAAcH,IAAYD,EAASA,GAAUM,MAAaC,WAAaN,IAD5Q,MAEG,EAAQ,WAGT,IAAIO,EAAQC,SAASC,KACjBC,EAAcF,SAASG,cAAc,SACrCC,EAAmBJ,SAASG,cAAc,SAC1CE,EAAc,mBAAmBC,KAAKC,UAAUC,UAChDC,EAAyC,aAAvBF,UAAUC,UAA2BD,UAAUG,eAAiB,EAClFC,EAAqBN,GAAeI,EAEpCG,GAAS,EACTC,EAAS,CACXC,EAAG,EACHC,EAAG,GAEDC,EAAiB,EACjBC,EAAc,EAoCdC,EAAa,SAAoBC,EAAQC,GAC3CD,EAAOE,UAAYD,EAEfD,EAAOG,aAAevB,GACxBA,EAAMwB,OAAOJ,IAIbK,EAAiB,WACnB,OAAON,EAAWhB,GA1CduB,EAAS,GACbA,EAAS,SACTA,GAAU,SACVA,GAAU,0BACVA,GAAU,uBACVA,GAAU,cAAgBT,EAAiB,oBAC3CS,GAAU,IAENd,GACFc,GAAU,SACVA,GAAU,6BACVA,GAAU,SAAW,EAAIZ,EAAOE,EAAI,gBACpCU,GAAU,UAAY,EAAIZ,EAAOC,EAAI,gBACrCW,GAAU,+BACVA,GAAU,MAEVA,GAAU,SACVA,GAAU,8BACVA,GAAU,KAGLA,IAtBU,IACbA,GA6CFC,EAAsB,WACxB,OAAOR,EAAWd,GArBdqB,EAAS,GACbA,EAAS,SACTA,GAAU,SACVA,GAAU,UAAYR,EAAc,gBACpCQ,GAAU,MALY,IAClBA,GAwBFE,EAAW,WACb,OAAOf,GAGLgB,EAAO,WACT,GAAIhB,EACF,OAAO,EAGTA,GAAS,EACTC,EAAS,CACPC,EAAGe,OAAOC,QACVf,EAAGc,OAAOE,SAEZ,IAAIC,EAAehC,SAASiC,gBAAgBhB,YAc5C,OAbAjB,SAASkC,KAAKC,MAAMC,MAAQpC,SAASkC,KAAKjB,YAAc,KACxDjB,SAASiC,gBAAgBE,MAAME,SAAW,SAC1CpB,EAAcjB,SAASiC,gBAAgBhB,YACvCD,EAAiBC,EAAce,EAC/BhC,SAASkC,KAAKC,MAAMC,MAAQ,GAC5BpC,SAASiC,gBAAgBE,MAAME,SAAW,GAC1Cb,IACAE,IAEIf,GACFkB,OAAOhB,OAAO,EAAG,IAGZ,GAGLyB,EAAS,WACX,QAAK1B,IAILA,GAAS,EACTV,EAAYmB,UAAY,GACxBjB,EAAiBiB,UAAY,GAEzBV,GACFkB,OAAOhB,OAAOA,EAAOC,EAAGD,EAAOE,IAG1B,IAqBT,OATAf,SAASuC,iBAAiB,SATb,WACN3B,IAILK,EAAcjB,SAASiC,gBAAgBhB,YACvCS,OAIe,CACfE,KAAMA,EACNU,OAAQA,EACRE,OAAQ,WACN,OAAQb,IAAsBW,IAATV,KAEvBD,SAAUA","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define('bodyScroll', factory) :\n    (global = global || self, global.bodyScroll = factory());\n}(this, function () { 'use strict';\n\n    const $head = document.head;\n    const $stylerBase = document.createElement('style');\n    const $stylerResizable = document.createElement('style');\n\n    const isLegacyIOS = /iPad|iPhone|iPod/.test(navigator.platform);\n    const isMultiTouchMac =\n        navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1; // aka iOS >= 13\n    const isAppleTouchDevice = isLegacyIOS && isMultiTouchMac;\n\n    const IMPORTANT_STATEMENT = '!important';\n\n    let status = false;\n    let scroll = {\n        x: 0,\n        y: 0\n    };\n    let scrollBarWidth = 0;\n    let clientWidth = 0;\n\n    const getBaseRules = () => {\n        let output = '';\n        output = ' html,';\n        output += 'body {';\n        output += 'height: auto' + IMPORTANT_STATEMENT + ';';\n        output += 'margin: 0' + IMPORTANT_STATEMENT + ';';\n        output +=\n            'padding: 0 ' + scrollBarWidth + 'px 0 0' + IMPORTANT_STATEMENT + ';';\n        output += '}';\n\n        if (isAppleTouchDevice) {\n            output += 'html {';\n            output += 'position: fixed' + IMPORTANT_STATEMENT + ';';\n            output += 'top: ' + -1 * scroll.y + 'px' + IMPORTANT_STATEMENT + ';';\n            output += 'left: ' + -1 * scroll.x + 'px' + IMPORTANT_STATEMENT + ';';\n            output += 'overflow: visible' + IMPORTANT_STATEMENT + ';';\n            output += '}';\n        } else {\n            output += 'body {';\n            output += 'overflow: hidden' + IMPORTANT_STATEMENT + ';';\n            output += '}';\n        }\n\n        return output;\n    };\n\n    const getResizableRules = () => {\n        let output = '';\n        output = ' html,';\n        output += 'body {';\n        output += 'width: ' + clientWidth + 'px' + IMPORTANT_STATEMENT + ';';\n        output += '}';\n        return output;\n    };\n\n    const printRules = ($actor, rules) => {\n        $actor.innerHTML = rules;\n\n        if ($actor.parentNode !== $head) {\n            $head.append($actor);\n        }\n    };\n\n    const printBaseRules = () => printRules($stylerBase, getBaseRules());\n\n    const printResizableRules = () =>\n        printRules($stylerResizable, getResizableRules());\n\n    const isLocked = () => status;\n\n    const lock = () => {\n        if (status) {\n            return false;\n        }\n\n        status = true;\n\n        scroll = {\n            x: window.scrollX,\n            y: window.scrollY\n        };\n\n        const _clientWidth = document.documentElement.clientWidth;\n        document.body.style.width = document.body.clientWidth + 'px';\n        document.documentElement.style.overflow = 'hidden';\n        clientWidth = document.documentElement.clientWidth;\n        scrollBarWidth = clientWidth - _clientWidth;\n        document.body.style.width = '';\n        document.documentElement.style.overflow = '';\n\n        printBaseRules();\n\n        printResizableRules();\n\n        if (isAppleTouchDevice) {\n            window.scroll(0, 0);\n        }\n\n        return true;\n    };\n\n    const unlock = () => {\n        if (!status) {\n            return false;\n        }\n\n        status = false;\n\n        $stylerBase.innerHTML = '';\n        $stylerResizable.innerHTML = '';\n\n        if (isAppleTouchDevice) {\n            window.scroll(scroll.x, scroll.y);\n        }\n\n        return true;\n    };\n\n    const resize = () => {\n        if (!status) {\n            return;\n        }\n\n        clientWidth = document.documentElement.clientWidth;\n\n        printResizableRules();\n    };\n\n    document.addEventListener('resize', resize);\n\n    var bodyScroll = {\n        lock: lock,\n        unlock: unlock,\n        toggle: () => (!isLocked() ? lock() : unlock()),\n        isLocked: isLocked\n    };\n\n    return bodyScroll;\n\n}));\n"],"file":"body-scroll.min.js"}